package kse.unit5.topic

object polymorphic extends App:

  /*
      Calculus λ→

      Г, x: ɑ ⊦ x: ɑ                (axiom)

      Г ⊦ u: (ɑ → β),  Г ⊦ v: ɑ
      -------------------------    (elimination)
            Г ⊦ (uv): β


        Г, x: ɑ ⊦ u: β
      -----------------           (introduction)
      Г ⊦ (λx.u): ɑ → β

   */

  /*
         x: ɑ ⊦ x: ɑ
      ----------------      (applying introduction)
      ⊦ (λx.x): (ɑ → ɑ)
   */

  lazy val id: [ɑ] => ɑ => ɑ =
    [ɑ] => (v: ɑ) => v

  /*
                               g: (ɑ → β) ⊦ g: (ɑ → β), x: ɑ ⊦ x: ɑ
      f: (β → γ) ⊦ f: (β → γ), ------------------------------------   (applying elimination)
                                    g: (ɑ → β), x: ɑ ⊦ (gx): β
      ------------------------------------------------------------    (applying elimination)
                  f: (β → γ), g: (ɑ → β), x: ɑ ⊦ f(gx): γ
      ------------------------------------------------------------    (applying introduction)
                 f: (β → γ), g: (ɑ → β) ⊦ λx.f(gx): ɑ → γ
      ------------------------------------------------------------    (applying introduction)
                f: (β → γ) ⊦ λg.λx.f(gx): (ɑ → β) → (ɑ → γ)
      ------------------------------------------------------------    (applying introduction)
              ⊦ λf.λg.λx.f(gx): (β → γ) → ((ɑ → β) → (ɑ → γ))

   */
  lazy val `f(g(x))`: [ɑ, β, γ] => (β => γ) => ((ɑ => β) => (ɑ => γ)) =
    [ɑ, β, γ] => (f: (β => γ)) => ((g: (ɑ => β)) => ((x: ɑ) => f(g(x))))

  lazy val Y: [ɑ] => ((ɑ => ɑ) => (ɑ => ɑ)) => (ɑ => ɑ) =
    [ɑ] => (f: (ɑ => ɑ) => (ɑ => ɑ)) => (x: ɑ) => f(Y(f))(x)
